/**
 * The template of Topcoder
 * Author: XadillaX (admin#xcoder.in)
 */
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <string>
#include <map>
#include <queue>
#include <stack>
#include <list>
#include <deque>
#include <vector>
#include <algorithm>
#include <iostream>
#include <cmath>
#include <ctime>
using namespace std;

#define ZERO(x) (memset(x, 0, sizeof(x)))
#define SIZE(x) ((int)(x.size()))
#define LENGTH(x) ((int)(x.length()))
#define LL long long

/** Segment tree */
#define LC(x) ((x >> 1) + 1)
#define RC(x) ((x >> 1) + 2)

/** Math */
const double pi = acos(-1.0f);
const double eps = 1e-8;

class FlippingBitsDiv2 
{
public:
    int getmin(vector <string> S, int M);
    
    string str;
    int group;
    int tn1[2600], tnsum1[2600];
    int tn2[2600], tnsum2[2600];
    
    int dp1[2600][2];
    int dp2[2600][2];
    
    int calcsum(int l, int r)
    {
    	if(l > r) return 0;
    	int tot = tnsum1[r] - tnsum1[l - 1];
    	return tot;
    }
};

int FlippingBitsDiv2::getmin(vector <string> S, int M)
{
    str = "";
    for(int i = 0; i < SIZE(S); i++) str += S[i];
    group = LENGTH(str) / M;
    ZERO(tn1);
    ZERO(tn2);
    
    // init.
    for(int i = 0; i < group; i++)
    {
    	int op = i * M;
    	int ed = op + M;
    	for(int j = op; j < ed; j++)
    	{
    		if(str[j] == '0') tn1[i]++, tn2[group - i - 1]++;
    	}
    	
    	dp1[i][0] = 100000;
    	dp1[i][1] = 100000;
    	dp2[i][0] = 100000;
    	dp2[i][1] = 100000;
    }
    
    // tnsum
    for(int i = 0; i < group; i++)
    {
    	if(i == 0) tnsum1[0] = tn1[0], tnsum2[0] = tn2[0];
    	else
    	{
    		tnsum1[i] = tnsum1[i - 1] + tn1[i];
    		tnsum2[i] = tnsum2[i - 1] + tn2[i];
    	}
    }
    
    // dp.
    for(int i = 0; i <= group; i++)
    {
    	if(i == 0)
    	{
    		dp1[i][0] = dp1[i][1] = dp2[i][0] = dp2[i][1] = 0;
    	}
    	else
    	if(i == 1)
    	{
    		// head -> tail
    		dp1[i][0] = tn1[i - 1];
    		dp1[i][1] = 1 + (M - tn1[i - 1]);
    		
    		// tail -> head
    		dp2[i][0] = tn2[i - 1];
    		dp2[i][1] = 1 + (M - tn2[i - 1]);
    	}
    	else
    	{
    		// head -> tail
    		dp1[i][0] = min(
    			dp1[i - 1][0] + tn1[i - 1],
    			dp1[i - 1][1] + tn1[i - 1]
    		);
    		dp1[i][1] = min(
    			dp1[i - 1][0] + 2 + (M - tn1[i - 1]),
    			dp1[i - 1][1] + (M - tn1[i - 1])
    		);
    		
    		// tail -> head
    		dp2[i][0] = min(
    			dp2[i - 1][0] + tn2[i - 1],
    			dp2[i - 1][1] + tn2[i - 1]
    		);
    		dp2[i][1] = min(
    			dp2[i - 1][0] + 2 + (M - tn2[i - 1]),
    			dp2[i - 1][1] + (M - tn2[i - 1])
    		);
    	}
    }
    
    int minans = 100000000;
    for(int i = 0; i <= group; i++)
    {
    	for(int j = 0; j <= group - i; j++)
    	{
    		int zzl = i;
    		int zzr = group - j - 1;
    		
    		minans = min(minans,
    			min(dp1[i][0], dp1[i][1]) +
    			min(dp2[j][0], dp2[j][1]) +
    			calcsum(zzl, zzr)
    			);
    	}
    }
    
    return minans;
}


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	FlippingBitsDiv2 *obj;
	int answer;
	obj = new FlippingBitsDiv2();
	clock_t startTime = clock();
	answer = obj->getmin(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"00111000"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"00111000"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 3;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"111111"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	p2 = 0;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"00100"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	p2 = 2;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"00010","11010110","1010111","110001010","0110001100","000110110","011010101","00","111","100"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 13;
	p2 = 31;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"00010010100010111011000011000100010000111000011101","10100001100101001101000100111111110010100110001011","11011010000101001011110001000110001001000001111000","00011010010011111110010011111110011010010010110100","00101100111010101011010010111000010111111001001000","10110001110010100001010010110011100011100010111000","11001011110101110011100000111011111101011000101000","10101100000011101101110110010010011001001110001101","11010101110101100110100000101100011101010000110010","01100000000010110111110010000100110111000101011101","01101101011101101011101011111110010010100000111010","01101111101011001001010110111111010100000010100001","10010001001111010001100011001001010110001011101000","01011011111111111101111010000110100111010101000000","10100100011100110111001100010100001011101101011010","01110001101011111000100100110000011000100111011010","11001001010100001101110001110101001111110110100110","01110101111000011011101000001011001010000100100010","1111100010100110001100010111010111110110110100"
			
			};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(5, p0, p1, false, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
